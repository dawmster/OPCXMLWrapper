// В системе храняться сокращенные имена тегов
// Для вычисления полного имени используется константа - префикс OPC
// и жестко закодированное вычисление суффиксов (DACA_PV или daca_pv)
Функция ПолноеИмяТэгаOPC(ItemName, Префикс) Экспорт
	Если Префикс = "epks\" Тогда
		ПрефиксOPC = Константы.ПрефиксOPC.Получить();
	Иначе
		ПрефиксOPC = Константы.ПрефиксАргоси.Получить();
	КонецЕсли;	
	Если НЕ ПустаяСтрока(ПрефиксOPC) И Найти(ItemName, ПрефиксOPC) = 0  Тогда
		ItemName = ПрефиксOPC + ItemName;
	КонецЕсли;
	Возврат ItemName;
КонецФункции

Функция ПолучитьСписокТегов_Внутр(ТаблицаРезультатов = Неопределено) Экспорт
	Если ТаблицаРезультатов = Неопределено Тогда
		ТаблицаРезультатов = ПолучитьТаблицуТэгов();
	КонецЕсли;
	СписокТегов = "";
	Для Каждого СтрокаИдентификатора ИЗ ТаблицаРезультатов Цикл
		Если СтрокаИдентификатора.Сумматор = Истина Тогда
			Для I = 1 По 24 Цикл
				Если СписокТегов <> "" Тогда
					СписокТегов = СписокТегов + ",";
				КонецЕсли;
				СписокТегов = СписокТегов + СтрокаИдентификатора.Идентификатор + "[" + Строка(I) + "]";			
			КонецЦикла;			
		Иначе
			Если СписокТегов = "" Тогда
				СписокТегов = СтрокаИдентификатора.Идентификатор;
			Иначе 
				СписокТегов = СписокТегов + "," + СтрокаИдентификатора.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат СписокТегов;
КонецФункции

Функция СоздатьТаблицуЗначений() Экспорт
	Табл = Новый ТаблицаЗначений;
	Табл.Колонки.Добавить("ItemName");    
	Табл.Колонки.Добавить("Value");
	Табл.Колонки.Добавить("Timestamp");
	Табл.Колонки.Добавить("Quality");
	Табл.Колонки.Добавить("ResultID");
	Табл.Колонки.Добавить("DiagnosticInfo");
	Табл.Колонки.Добавить("Error");
	Возврат Табл;
КонецФункции

Функция ОбработатьОшибоки(Errors) 
	Результат = Новый Структура;
	Если Errors <> Неопределено Тогда
		Для Каждого Err Из Errors Цикл
			Результат.Вставить(Err.ID.ЛокальноеИмя, Err.Text);
		КонецЦикла;		
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура СоздатьСтроку(Стр, ItemValue, Errors)
	Если ItemValue.ResultID = Неопределено Тогда // S_OK
		Если ItemValue.Quality <> Неопределено Тогда
			Стр.Quality = ItemValue.Quality.QualityField;
			Если Стр.Quality = "good" Тогда
				Стр.Value = ItemValue.Value;				
			КонецЕсли;		
			Если ItemValue.Quality.LimitField <> "none" Тогда
				Стр.Quality = Стр.Quality + "," + ItemValue.Quality.LimitField;
			КонецЕсли
		Иначе 
			Стр.Value = ItemValue.Value;
		КонецЕсли;				
	Иначе
		ТекстОшибки = "";		
		Стр.ResultID = ItemValue.ResultID.ЛокальноеИмя;
		Если Errors.Свойство(Стр.ResultID, ТекстОшибки) Тогда
			Стр.Error = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	Стр.Timestamp = ItemValue.Timestamp;
	Стр.DiagnosticInfo = ItemValue.DiagnosticInfo;	
КонецПроцедуры 

// Основная функция для чтения текущего значения тегов OPC
// Принимает список необходимых тегов в виде строки.
// Теги перечислены через ",".
// Возвращает таблицу значений, соотв. типу ItemValue OPC XML DA 
// Теги возвращаются как перечислено в исходных данных
Функция ПрочитатьТегиОРС(ItemNames, Префикс = "epks\") Экспорт	
	Определение = WSСсылки.OPCXMLDA.ПолучитьWSОпределения();
	Прокси = WSСсылки.OPCXMLDA.СоздатьWSПрокси("http://opcfoundation.org/webservices/XMLDA/1.0/", "OPC", "LocalPort");
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "Read");
	ReadПараметр = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "RequestOptions");
	Options = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	ReadПараметр.Options = Options;
	
	Options.ClientRequestHandle = "1C";
	Options.ReturnItemTime = true;	
	Options.ReturnErrorText = true;
	//Options.ReturnItemName = true;
	//Options.ReturnDiagnosticInfo = true;
		
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "ReadRequestItemList");
	ItemList = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ReadПараметр.ItemList = ItemList;	
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "ReadRequestItem");
	
	МнСтр=СтрЗаменить(ItemNames,",",Символы.ПС);		
	Для н=1 По СтрЧислоСтрок(МнСтр) Цикл		
		ItemName = СтрПолучитьСтроку(МнСтр,н);
    	Item = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
		Item.ClientItemHandle = ItemName;
		Item.ItemName = ПолноеИмяТэгаOPC(ItemName, Префикс);
		ItemList.Items.Добавить(Item);
	КонецЦикла;		
	
	Попытка
		// Чтение тэгов
		Resp = Прокси.Read(ReadПараметр);	
	Исключение // Ошибки записываем в журнал, так как эта функция может работать в виде регламентного задания		
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("ПрочитатьТегиОРС", 
        	УровеньЖурналаРегистрации.Предупреждение, ,  ОписаниеОшибки(), "Ошибка блочного чтения тегов");
		Возврат Неопределено;
	КонецПопытки;
	
	Табл = СоздатьТаблицуЗначений();
	Errors = ОбработатьОшибоки(Resp.Errors);
	Для Каждого Item Из Resp.RItemList.Items Цикл
		Стр = Табл.Добавить();
		Стр.ItemName = Item.ClientItemHandle;			
		СоздатьСтроку(Стр,Item,Errors); 
	КонецЦикла;		
	
	Возврат Табл;
КонецФункции

Функция СоздатьПодпискуOPC(ItemNames, SubscriptionPingRate = 60000, ТаблицаРезультатов, ЧастотаОбновления, Префикс = "epks\") Экспорт
	Определение = WSСсылки.OPCXMLDA.ПолучитьWSОпределения();
	Прокси = WSСсылки.OPCXMLDA.СоздатьWSПрокси("http://opcfoundation.org/webservices/XMLDA/1.0/", "OPC", "LocalPort");
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "Subscribe");
	SubscribeПараметр = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	SubscribeПараметр.SubscriptionPingRate = SubscriptionPingRate;
	SubscribeПараметр.ReturnValuesOnReply = Ложь;
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "RequestOptions");
	Options = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	Options.ReturnItemTime = true;		
	Options.ClientRequestHandle = "1C";
	Options.ReturnErrorText = true;
	SubscribeПараметр.Options = Options;
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "SubscribeRequestItemList");
	ItemList = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	SubscribeПараметр.ItemList = ItemList;
	ItemList.RequestedSamplingRate = 0;
	ItemList.EnableBuffering = Истина;
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "SubscribeRequestItem");
	МнСтр=СтрЗаменить(ItemNames,",",Символы.ПС);	
	Для н=1 По СтрЧислоСтрок(МнСтр) Цикл	
		WSRequestItem = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
		ItemName = СтрПолучитьСтроку(МнСтр,н);
		WSRequestItem.ClientItemHandle = ItemName;
		WSRequestItem.ItemName = ПолноеИмяТэгаOPC(ItemName, Префикс);
		//WSRequestItem.EnableBuffering = true;
		//WSRequestItem.RequestedSamplingRate = 500;
		ItemList.Items.Добавить(WSRequestItem);
	КонецЦикла;		
	
	Попытка
		// Создаем подписку на теги
		Resp = Прокси.Subscribe(SubscribeПараметр);	
	Исключение // Ошибки записываем в журнал, так как эта функция может работать в виде регламентного задания				
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("СоздатьПодпискуOPC", 
        	УровеньЖурналаРегистрации.Ошибка, ,ОписаниеОшибки(), "Ошибка создания подписки OPC");
		Возврат "";	
	КонецПопытки;
	
	ЧастотаОбновления = Resp.RItemList.RevisedSamplingRate;
	ТаблицаРезультатов = СоздатьТаблицуЗначений();
	Errors = ОбработатьОшибоки(Resp.Errors);	
	Для Каждого Item Из Resp.RItemList.Items Цикл
		Стр = ТаблицаРезультатов.Добавить();
		Стр.ItemName = Item.ItemValue.ClientItemHandle;			
		СоздатьСтроку(Стр, Item.ItemValue, Errors);		
	КонецЦикла;
	
	Возврат Resp.ServerSubHandle;	
КонецФункции

Функция ОбновитьПодпискуOPC(ServerSubHandle, HoldTime, WaitTime = 0, ReturnAllItems = Ложь) Экспорт
	Определение = WSСсылки.OPCXMLDA.ПолучитьWSОпределения();
	Прокси = WSСсылки.OPCXMLDA.СоздатьWSПрокси("http://opcfoundation.org/webservices/XMLDA/1.0/", "OPC", "LocalPort");
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "SubscriptionPolledRefresh");
	SubscriptionPolledRefreshПараметр = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	

	SubscriptionPolledRefreshПараметр.ServerSubHandles.Добавить(ServerSubHandle);		
	SubscriptionPolledRefreshПараметр.ReturnAllItems = ReturnAllItems;		
	Если HoldTime <> Неопределено Тогда
		SubscriptionPolledRefreshПараметр.HoldTime = HoldTime;
		SubscriptionPolledRefreshПараметр.WaitTime = WaitTime;
	КонецЕсли;
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "RequestOptions");
	Options = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	Options.ReturnItemTime = true;		
	Options.ReturnErrorText = true;
	Options.ClientRequestHandle = "1C";	
	SubscriptionPolledRefreshПараметр.Options = Options;
	
	Попытка
		// Создаем подписку на теги
		Resp = Прокси.SubscriptionPolledRefresh(SubscriptionPolledRefreshПараметр);	
	Исключение // Ошибки записываем в журнал, так как эта функция может работать в виде регламентного задания		
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("СоздатьПодпискуOPC", 
        	УровеньЖурналаРегистрации.Предупреждение, ,ОписаниеОшибки(), "Ошибка создания подписки OPC");
		Возврат Неопределено;
	КонецПопытки;
	
	// Проверяем: подписка не закончилась
	Для Каждого invalidHandle Из Resp.InvalidServerSubHandles Цикл
		Если invalidHandle = ServerSubHandle Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Табл = СоздатьТаблицуЗначений();
	Errors = ОбработатьОшибоки(Resp.Errors);
	Для Каждого ItemList Из Resp.RItemList Цикл
		Для Каждого Item Из ItemList.Items Цикл
			Стр = Табл.Добавить();
			Стр.ItemName = Item.ClientItemHandle;			
			СоздатьСтроку(Стр,Item,Errors);
		КонецЦикла;
	КонецЦикла;				
	
	Возврат Табл;	
КонецФункции

Функция ОтменитьПодпискуOPC(ServerSubHandle) Экспорт
	Определение = WSСсылки.OPCXMLDA.ПолучитьWSОпределения();
	Прокси = WSСсылки.OPCXMLDA.СоздатьWSПрокси("http://opcfoundation.org/webservices/XMLDA/1.0/", "OPC", "LocalPort");
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Тип("http://opcfoundation.org/webservices/XMLDA/1.0/", "SubscriptionCancel");
	SubscriptionCancelПараметр = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);	
	SubscriptionCancelПараметр.ServerSubHandle = ServerSubHandle;
	SubscriptionCancelПараметр.ClientRequestHandle = "1C";
	
	Попытка
		// Отменяем подписку на теги
		Resp = Прокси.SubscriptionCancel(SubscriptionCancelПараметр);	
		Возврат Истина;
	Исключение // Ошибки записываем в журнал, так как эта функция может работать в виде регламентного задания		
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("ОтменитьПодпискуOPC", 
        	УровеньЖурналаРегистрации.Предупреждение, ,ОписаниеОшибки(), "Ошибка отмены подписки OPC");
	КонецПопытки;
		
	Возврат Ложь;
КонецФункции

Процедура ЗаписатьОшибки(ТаблицаРезультатовПодписки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОшибкиOPC.Тэг
	               |ИЗ
	               |	РегистрСведений.ОшибкиOPC КАК ОшибкиOPC";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОшибкиOPC.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Тэг = Выборка.Тэг;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	Для Каждого Стр ИЗ ТаблицаРезультатовПодписки Цикл
		Если Стр.ResultID <> Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений.ОшибкиOPC.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Тэг = Стр.ItemName;
			МенеджерЗаписи.КодОшибки = Стр.ResultID;
			МенеджерЗаписи.ТекстОшибки = Стр.Error;
			МенеджерЗаписи.Дата = ТекущаяДата();
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗаписьВРегистре(НаборЗаписей,ЗаписьТега)
	ЗаписьРегистра = НаборЗаписей.Добавить();
	Если ЗаписьТега.Timestamp <> Неопределено Тогда
		ЗаписьРегистра.Период = ЗаписьТега.Timestamp;	
	Иначе
		ЗаписьРегистра.Период = ТекущаяДата();
	КонецЕсли;
	ЗаписьРегистра.Тэг = ЗаписьТега.ItemName;			 
	ЗаписьРегистра.Дата = ТекущаяДата();
	Если ЗаписьТега.Value <> Неопределено Тогда
		Если ТипЗнч(ЗаписьТега.Value) = Тип("Число") Тогда
			ЗаписьРегистра.ЗначениеЧисло = ЗаписьТега.Value;
		Иначе
			ЗаписьРегистра.ЗначениеСтрока = Строка(ЗаписьТега.Value);
		КонецЕсли;
	КонецЕсли;	
	ЗаписьРегистра.Качество = ЗаписьТега.Quality;
	ЗаписьРегистра.Статус = ЗаписьТега.ResultID;
КонецПроцедуры

// Удаление всех записей
Процедура УдалитьВсеЗаписиРегистра() Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СредстваИзмерения.Тэг
	               |ИЗ
	               |	РегистрСведений.СредстваИзмерения КАК СредстваИзмерения";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СредстваИзмерения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Тэг.Установить(Выборка.Тэг);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

// Очистка старых записей, для которых есть новые значения
Процедура ОчиститьРегистры() Экспорт
	Дата = ТекущаяДата();
	
	ГлубинаИстории = Константы.ГлубинаИсторииOPC.Получить();
	Если ГлубинаИстории = Неопределено ИЛИ ГлубинаИстории <= 0 Тогда
		ГлубинаИстории = 3; // По-умолчанию 3 часа
	ИначеЕсли ГлубинаИстории > 96 Тогда // Максимум: неделя хранения
		ГлубинаИстории = 96;
	КонецЕсли;	
	
	ГраницаРегистра = НачалоМинуты(Дата) - ГлубинаИстории * 60 * 60;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СредстваИзмерения.Тэг,
	               |	СредстваИзмерения.Период
	               |ИЗ
	               |	РегистрСведений.СредстваИзмерения КАК СредстваИзмерения
	               |ГДЕ
	               |	СредстваИзмерения.Период < &Период
	               |	И СредстваИзмерения.Тэг В
	               |			(ВЫБРАТЬ
	               |				СредстваИзмерения_1.Тэг
	               |			ИЗ
	               |				РегистрСведений.СредстваИзмерения КАК СредстваИзмерения_1
	               |			ГДЕ
	               |				СредстваИзмерения_1.Тэг = СредстваИзмерения.Тэг
	               |				И СредстваИзмерения_1.Период >= &Период)";
	Запрос.УстановитьПараметр("Период", ГраницаРегистра);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СредстваИзмерения.СоздатьМенеджерЗаписи();	
	    МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Тэг = Выборка.Тэг;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
КонецПроцедуры

Процедура ФоновоеОбновление() Экспорт
	Перем ТаблицаРезультатовПодписки;
	Перем ЧастотаОбновления;
	Перем РабочаяДата;
	
	ИдПодписки = "";
	РабочийСписок = "";
	РабочаяДата = ТекущаяДата();
	
	// Очистка регистров может быть очень медленной на "холодном" запуске
	ОчиститьРегистры();
	
	МенеджерЗаписи = РегистрыСведений.ОбновлениеOPC.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = "OPC"; // Не важно
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		ИдПодписки = МенеджерЗаписи.ИдПодписки;
		РабочийСписок = МенеджерЗаписи.РабочийСписок;
		РабочаяДата = МенеджерЗаписи.Дата;
		ЧастотаОбновления = МенеджерЗаписи.ЧастотаОбновления;
	КонецЕсли;
	
	СписокТегов = ПолучитьСписокТегов_Внутр();
	
	Если ИдПодписки = "" ИЛИ РабочийСписок <> СписокТегов Тогда
		Если ИдПодписки <> "" Тогда
			ОтменитьПодпискуOPC(ИдПодписки);			
		КонецЕсли;
		РабочаяДата = ТекущаяДата();		
		ИдПодписки = СоздатьПодпискуOPC(СписокТегов, 90000, ТаблицаРезультатовПодписки, ЧастотаОбновления);
		Если ИдПодписки = "" Тогда
			ЗаписьЖурналаРегистрации("ФоновоеОбновление OPC", 
				УровеньЖурналаРегистрации.Предупреждение, ,"Не удалось создать подписку", "Ошибка фонового обновления");							
			// Фиксируем отсуствие подписки	
			МенеджерЗаписи = РегистрыСведений.ОбновлениеOPC.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Сервис = "OPC"; 
			МенеджерЗаписи.ИдПодписки = "";
			МенеджерЗаписи.Дата = РабочаяДата;
			МенеджерЗаписи.Записать();							
			Возврат;
		КонецЕсли;
		ЗаписатьОшибки(ТаблицаРезультатовПодписки);
	КонецЕсли;
	ВремяОжидания = ТекущаяДата() + 3;  // + 3 секунд ожидания
	Табл = ОбновитьПодпискуOPC(ИдПодписки, ВремяОжидания);
	Если Табл = Неопределено Тогда 		// Ошибка обновления: 
		ЗаписьЖурналаРегистрации("ФоновоеОбновление OPC", 
			УровеньЖурналаРегистрации.Предупреждение, ,"Не удалось обновить подписку", "Ошибка фонового обновления");									
		// Отменяем подписку и завершаем задачу	
		ОтменитьПодпискуOPC(ИдПодписки); 
		// Фиксируем отсуствие подписки
		МенеджерЗаписи = РегистрыСведений.ОбновлениеOPC.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сервис = "OPC";   
		МенеджерЗаписи.ИдПодписки = "";
		МенеджерЗаписи.Дата = ТекущаяДата();
		МенеджерЗаписи.Записать();					
		Возврат;                          
	КонецЕсли;
	
	Если Табл.Количество() > 0 Тогда
		НаборЗаписей = РегистрыСведений.СредстваИзмерения.СоздатьНаборЗаписей();
		Для Каждого ЗаписьТега Из Табл Цикл
			СоздатьЗаписьВРегистре(НаборЗаписей,ЗаписьТега);		
		КонецЦикла;	
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОбновлениеOPC.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = "OPC";   
	МенеджерЗаписи.ИдПодписки = ИдПодписки;
	МенеджерЗаписи.РабочийСписок = СписокТегов;
	МенеджерЗаписи.Дата = РабочаяДата;
	МенеджерЗаписи.ЧастотаОбновления = ЧастотаОбновления;
	МенеджерЗаписи.Записать();						
КонецПроцедуры